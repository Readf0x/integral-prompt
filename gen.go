// The following directive is necessary to make the package coherent:

//go:build generate

// This program generates buildinfo.go. It can be invoked by running
// go generate
package main

//go:generate go run gen.go

import (
	"errors"
	"fmt"
	"io"
	"log"
	"os"
	"text/template"

	"github.com/go-git/go-git/v6"
)

const buildFile = "buildinfo.go"

func main() {
	file, err := os.Create(buildFile)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var hash, tag string
	if len(os.Args) < 2 {
		cwd, err := os.Getwd()
		if err != nil {
			log.Fatal(err)
		}
		repo, err := git.PlainOpen(cwd)
		if err != nil {
			log.Fatal(err)
		}
		head, err := repo.Head()
		if err != nil {
			log.Fatal(err)
		}
		tags, err := repo.Tags()
		if err != nil {
			log.Fatal(err)
		}
		tagRef, err := tags.Next()
		if err == nil {
			tag = tagRef.Hash().String()
		} else if errors.Is(err, io.EOF) {
			tag = "unset"
		}
		hash = head.Hash().String()
	} else {
		hash = os.Args[1]
		tag = os.Args[2]
	}

	fmt.Printf("Commit: %s\nTag: %s\n", hash, tag)
	
	temp.Execute(file, buildinfo{
		Commit: hash,
		Tag: tag,
	})
}

var temp = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main

const Commit = "{{ .Commit }}"
const Version = "{{ .Tag }}"
`))

type buildinfo struct {
	Commit string
	Tag string
}

